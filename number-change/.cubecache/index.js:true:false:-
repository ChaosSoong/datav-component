{"queryPath":"/index.js","absPath":"/Users/william/Desktop/czb/datav-component/number-change/index.js","realPath":"/index.js","type":"script","source":"var Event = require('bcore/event');\nvar $ = require('jquery');\nvar _ = require('lodash');\n//var Chart = require('XXX');\n\nfunction toThousands(num) {\n  var num = (num || 0).toString(),\n    temp = num.length % 3;\n  switch (temp) {\n    case 1:\n      num = '00' + num;\n      break;\n    case 2:\n      num = '0' + num;\n      break;\n  }\n  return num\n    .match(/\\d{3}/g)\n    .join(',')\n    .replace(/^0+/, '');\n}\n\n/**\n * 马良基础类\n */\nmodule.exports = Event.extend(\n  function Base(container, config) {\n    this.config = {\n      theme: {}\n    };\n    this.container = $(container); //容器\n    this.apis = config.apis; //hook一定要有\n    this._data = null; //数据\n    this.chart = null; //图表\n    this.interval = null;\n    this.init(config);\n  },\n  {\n    /**\n     * 公有初始化\n     */\n    init: function(config) {\n      //1.初始化,合并配置\n      this.mergeConfig(config);\n      //2.刷新布局,针对有子组件的组件 可有可无\n      this.updateLayout();\n      //3.子组件实例化\n      //this.chart = new Chart(this.container[0], this.config);\n      //4.如果有需要, 更新样式\n      this.updateStyle();\n      // var newStyle = document.createElement('style');\n      // newStyle.appendChild(document.createTextNode(\"\\\n      // @font-face {\\\n      // font-family: 'my';\\\n      // src: url('\"+ this.config.font_family +\"');\\\n      // }\\\n      // \"));\n      // document.head.appendChild(newStyle);\n    },\n    /**\n     * 绘制\n     * @param data\n     * @param options 不一定有\n     * !!注意: 第二个参数支持config, 就不需要updateOptions这个方法了\n     */\n    render: function(data, config) {\n      clearInterval(this.interval);\n      data = this.data(data);\n      var cfg = this.mergeConfig(config);\n      let num = Number(data[0].value);\n      this.container.html(toThousands(num));\n      //更新图表\n      this.container.css({\n        fontFamily: this.config.font\n          ? 'DS-Digital'\n          : 'sans-serif, Arial, sans-serif',\n        color: this.config.color,\n        fontSize: this.config.size,\n        fontWeight: this.config.weight ? 'bold' : '',\n        letterSpacing: this.config.spaceing\n      });\n      //this.chart.render(data, cfg);\n      this.interval = setInterval(() => {\n        if (this.config.replace) {\n          let num_str = num.toString().replace(/1/g, '2');\n          num = Number(num_str);\n        }\n        this.container.html(toThousands(num));\n        let hour = new Date().getHours();\n        let start = this.config.start;\n        let end = this.config.end;\n        if (hour >= start && hour <= end) {\n          num = num + Math.round(Math.random() * this.config.max);\n        }\n      }, this.config.delay * 1000);\n      //如果有需要的话,更新样式\n      this.updateStyle();\n    },\n    /**\n     *\n     * @param width\n     * @param height\n     */\n    resize: function(width, height) {\n      this.updateLayout(width, height);\n      //更新图表\n      //this.chart.render({\n      //  width: width,\n      //  height: height\n      //})\n    },\n    /**\n     * 每个组件根据自身需要,从主题中获取颜色 覆盖到自身配置的颜色中.\n     * 暂时可以不填内容\n     */\n    setColors: function() {\n      //比如\n      //var cfg = this.config;\n      //cfg.color = cfg.theme.series[0] || cfg.color;\n    },\n    /**\n     * 数据,设置和获取数据\n     * @param data\n     * @returns {*|number}\n     */\n    data: function(data) {\n      if (data) {\n        this._data = data;\n      }\n      return this._data;\n    },\n    /**\n     * 更新配置\n     * 优先级: config.colors > config.theme > this.config.theme > this.config.colors\n     * [注] 有数组的配置一定要替换\n     * @param config\n     * @private\n     */\n    mergeConfig: function(config) {\n      if (!config) {\n        return this.config;\n      }\n      this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n      this.setColors();\n      this.config = _.defaultsDeep(config || {}, this.config);\n      return this.config;\n    },\n    /**\n     * 更新布局\n     * 可有可无\n     */\n    updateLayout: function() {},\n    /**\n     * 更新样式\n     * 有些子组件控制不到的,但是需要控制改变的,在这里实现\n     */\n    updateStyle: function() {\n      var cfg = this.config;\n      this.container.css({\n        'font-size': cfg.size + 'px',\n        color: cfg.color || '#fff'\n      });\n    },\n    /**\n     * 更新配置\n     * !!注意:如果render支持第二个参数options, 那updateOptions不是必须的\n     */\n    //updateOptions: function (options) {},\n    /**\n     * 更新某些配置\n     * 给可以增量更新配置的组件用\n     */\n    //updateXXX: function () {},\n    /**\n     * 销毁组件\n     */\n    destroy: function() {\n      console.log('请实现 destroy 方法');\n    }\n  }\n);\n","code":"'use strict';\n\nvar Event = require('bcore/event');\nvar $ = require('jquery');\nvar _ = require('lodash');\n\n\nfunction toThousands(num) {\n  var num = (num || 0).toString(),\n      temp = num.length % 3;\n  switch (temp) {\n    case 1:\n      num = '00' + num;\n      break;\n    case 2:\n      num = '0' + num;\n      break;\n  }\n  return num.match(/\\d{3}/g).join(',').replace(/^0+/, '');\n}\n\nmodule.exports = Event.extend(function Base(container, config) {\n  this.config = {\n    theme: {}\n  };\n  this.container = $(container);\n  this.apis = config.apis;\n  this._data = null;\n  this.chart = null;\n  this.interval = null;\n  this.init(config);\n}, {\n  init: function init(config) {\n    this.mergeConfig(config);\n\n    this.updateLayout();\n\n    this.updateStyle();\n  },\n\n  render: function render(data, config) {\n    var _this = this;\n\n    clearInterval(this.interval);\n    data = this.data(data);\n    var cfg = this.mergeConfig(config);\n    var num = Number(data[0].value);\n    this.container.html(toThousands(num));\n\n    this.container.css({\n      fontFamily: this.config.font ? 'DS-Digital' : 'sans-serif, Arial, sans-serif',\n      color: this.config.color,\n      fontSize: this.config.size,\n      fontWeight: this.config.weight ? 'bold' : '',\n      letterSpacing: this.config.spaceing\n    });\n\n    this.interval = setInterval(function () {\n      if (_this.config.replace) {\n        var num_str = num.toString().replace(/1/g, '2');\n        num = Number(num_str);\n      }\n      _this.container.html(toThousands(num));\n      var hour = new Date().getHours();\n      var start = _this.config.start;\n      var end = _this.config.end;\n      if (hour >= start && hour <= end) {\n        num = num + Math.round(Math.random() * _this.config.max);\n      }\n    }, this.config.delay * 1000);\n\n    this.updateStyle();\n  },\n\n  resize: function resize(width, height) {\n    this.updateLayout(width, height);\n  },\n\n  setColors: function setColors() {},\n\n  data: function data(_data) {\n    if (_data) {\n      this._data = _data;\n    }\n    return this._data;\n  },\n\n  mergeConfig: function mergeConfig(config) {\n    if (!config) {\n      return this.config;\n    }\n    this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n    this.setColors();\n    this.config = _.defaultsDeep(config || {}, this.config);\n    return this.config;\n  },\n\n  updateLayout: function updateLayout() {},\n\n  updateStyle: function updateStyle() {\n    var cfg = this.config;\n    this.container.css({\n      'font-size': cfg.size + 'px',\n      color: cfg.color || '#fff'\n    });\n  },\n\n  destroy: function destroy() {\n    console.log('请实现 destroy 方法');\n  }\n});","codeWraped":"Cube(\"/index.js\", [\"/node_modules/bcore/event.js\", \"/node_modules/jquery/dist/jquery.js\", \"/node_modules/lodash/lodash.js\"], function (module, exports, require, load, process, global) {\n\n  var Event = require('/node_modules/bcore/event.js');\n  var $ = require('/node_modules/jquery/dist/jquery.js');\n  var _ = require('/node_modules/lodash/lodash.js');\n\n\n  function toThousands(num) {\n    var num = (num || 0).toString(),\n    temp = num.length % 3;\n    switch (temp) {\n      case 1:\n        num = '00' + num;\n        break;\n      case 2:\n        num = '0' + num;\n        break;}\n\n    return num.match(/\\d{3}/g).join(',').replace(/^0+/, '');\n  }\n\n  module.exports = Event.extend(function Base(container, config) {\n    this.config = {\n      theme: {} };\n\n    this.container = $(container);\n    this.apis = config.apis;\n    this._data = null;\n    this.chart = null;\n    this.interval = null;\n    this.init(config);\n  }, {\n    init: function init(config) {\n      this.mergeConfig(config);\n\n      this.updateLayout();\n\n      this.updateStyle();\n    },\n\n    render: function render(data, config) {\n      var _this = this;\n\n      clearInterval(this.interval);\n      data = this.data(data);\n      var cfg = this.mergeConfig(config);\n      var num = Number(data[0].value);\n      this.container.html(toThousands(num));\n\n      this.container.css({\n        fontFamily: this.config.font ? 'DS-Digital' : 'sans-serif, Arial, sans-serif',\n        color: this.config.color,\n        fontSize: this.config.size,\n        fontWeight: this.config.weight ? 'bold' : '',\n        letterSpacing: this.config.spaceing });\n\n\n      this.interval = setInterval(function () {\n        if (_this.config.replace) {\n          var num_str = num.toString().replace(/1/g, '2');\n          num = Number(num_str);\n        }\n        _this.container.html(toThousands(num));\n        var hour = new Date().getHours();\n        var start = _this.config.start;\n        var end = _this.config.end;\n        if (hour >= start && hour <= end) {\n          num = num + Math.round(Math.random() * _this.config.max);\n        }\n      }, this.config.delay * 1000);\n\n      this.updateStyle();\n    },\n\n    resize: function resize(width, height) {\n      this.updateLayout(width, height);\n    },\n\n    setColors: function setColors() {},\n\n    data: function data(_data) {\n      if (_data) {\n        this._data = _data;\n      }\n      return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n      if (!config) {\n        return this.config;\n      }\n      this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n      this.setColors();\n      this.config = _.defaultsDeep(config || {}, this.config);\n      return this.config;\n    },\n\n    updateLayout: function updateLayout() {},\n\n    updateStyle: function updateStyle() {\n      var cfg = this.config;\n      this.container.css({\n        'font-size': cfg.size + 'px',\n        color: cfg.color || '#fff' });\n\n    },\n\n    destroy: function destroy() {\n      console.log('请实现 destroy 方法');\n    } });return module.exports;});","sourceMap":null,"modifyTime":1556417335272,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js"],"requiresOrigin":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js"],"debugInfo":[],"requiresArgsRefer":[{"type":"StringLiteral","start":35,"end":48,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":33}},"extra":{"rawValue":"bcore/event","raw":"'bcore/event'"},"value":"/node_modules/bcore/event.js"},{"type":"StringLiteral","start":67,"end":75,"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":24}},"extra":{"rawValue":"jquery","raw":"'jquery'"},"value":"/node_modules/jquery/dist/jquery.js"},{"type":"StringLiteral","start":94,"end":102,"loc":{"start":{"line":5,"column":16},"end":{"line":5,"column":24}},"extra":{"rawValue":"lodash","raw":"'lodash'"},"value":"/node_modules/lodash/lodash.js"}]}